@model ProductOverviewModel
@using Nop.Core
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@using Nop.Core.Infrastructure
@using Nop.Web.Extensions
@using Nop.Web.Models.Catalog;

@helper Text_Truncate(string input, int length)
{
    if (input.Length <= length)
    {
        @Html.Raw(@input)
    }
    else
    {
        @Html.Raw(@input.Substring(0, length))<text>...</text>
    }
}


@helper Price_Modifier(string input, int length)
{
    if (input.Length <= length)
    {
        @Html.Raw(@input)
    }
    else
    {
        @Html.Raw(@input.Substring(0, length))<text>...</text>
    }
}

@{
    //prepare "Add to cart" AJAX link
    string addtocartlink = "";
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 1;
    if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
    }
    else
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, });
    }
}


<div class="product-item">
    <div>

        @if(Model.Quantity > 0)
        {
            @*if (Model.AlternateImage != null)
            {
                <a href="@Url.RouteUrl("Product", new { SeName = Model.SeName})" class="clean">
                    <img data-alt-src="@Model.AlternateImage.ImageUrl" src="@Model.DefaultPictureModel.ImageUrl" class="img-responsive center-block swapImg" />
                </a>
            }
            else
            {*@
                <a href="@Url.RouteUrl("Product", new { SeName = Model.SeName})" class="clean">
                    <img src="@Model.DefaultPictureModel.ImageUrl" class="img-fluid center-block" />
                </a>
            //}
        }
        else
        {
            <a href="@Url.RouteUrl("Product", new { SeName = Model.SeName})" class="clean">
                <div class="image__blur">
                    <img class="img-fluid center-block" src="@Model.DefaultPictureModel.ImageUrl" />
                </div>
            </a>
        }
    </div>
  
    <div class="description">
        <h4 style="color:#969696;line-height:25px; font-size: 12px;"><a class="clean" href="@Url.RouteUrl("Product", new { SeName = Model.SeName})">@Html.DisplayFor(m => m.Name)</a></h4>
        @*<h4 class="text-center" style="color:#231F20;line-height:25px;"><a class="clean" href="@Url.RouteUrl("Product", new { SeName = Model.SeName})">@Html.DisplayFor(m => m.Name)</a></h4>*@
        @*<div class="prices text-center">*@
        <div class="prices">
                @if (!String.IsNullOrEmpty(Model.ProductPrice.OldPrice) || Model.ProductPrice.DisplayTaxShippingInfo){
                    if (!String.IsNullOrEmpty(Model.ProductPrice.OldPrice)){
                        
                    <div class="price old--price"><span style="color:black; text-decoration:line-through"><span style="color:#969696">@Model.ProductPrice.OldPrice</span></span></div>
                        
                    }
                    <div class="price actual--price">@Model.ProductPrice.Price</div>
                }
                else
                {
                    <div class="price">@Model.ProductPrice.Price</div>
                }
            </div>
        @if (Model.Quantity == 0)
        {
            <div class="image__text"><span class="out-of-stock">Out of stock</span></div>
        }
        else if (Model.MarkAsNew)
        {
            <div class="image__text"><span class="new-item">NEW</span></div>
        }
    </div>
   

</div>
